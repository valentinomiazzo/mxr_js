{
    "project": {
        "name": "Mxr.js",
        "description": "Mix-ins for Javascript",
        "version": "0.1.0",
        "url": ""
    },
    "files": {
        "js\\src\\Mxr.js": {
            "name": "js\\src\\Mxr.js",
            "modules": {},
            "classes": {
                "Mxr": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "Mxr": {
            "name": "Mxr",
            "shortname": "Mxr",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "js\\src\\Mxr.js",
            "line": 37,
            "description": "This is the collection of static methods exposed by Mxr.js",
            "static": 1
        }
    },
    "classitems": [
        {
            "file": "js\\src\\Mxr.js",
            "line": 54,
            "description": "Configures the library.\nIt expects a JSON like the following:\n\n    {\n        \"assert\" : callback,\n        \"In\": module\n    }\n\nIt is called at load time by require.js passing as `config` the config of the module.\nAnyway, you can call it again anytime.\n\nFields description:\n\n`assert`:\nOptional. The signature is `void assert(boolean, String)`.\nIf you pass `null` then assertions are disabled.\nIf you pass `undefined` then the default implementation is used.\n\n`In`:\nOptional. If you pass the `In.js` module here then it is merged with `Mxr.js` module.\nThis is handy if you want to call `Mxr.inheritFrom(a,b)`.\nIt is ignored if already merged.\nIt cannot be reverted.",
            "itemtype": "method",
            "name": "configure",
            "static": 1,
            "params": [
                {
                    "name": "config",
                    "description": "the configuration object",
                    "type": "Object"
                }
            ],
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 109,
            "description": "Declares a method abstract.\n\nIn this way the library can help you to spot abstract methods not properly overridden.\nUnder the hoods, it generates a new stub function with troubleshooting code inside.\n\n    function M() {}\n    M.prototype.doCoreStuff = Mxr.anAbstract(); //Note is anAbstract(); not anAbstract;\n    M.prototype.doStuf = function () {\n        //something before\n        this.doCoreStuff();\n        //something after\n    }",
            "itemtype": "method",
            "name": "anAbstract",
            "static": 1,
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 134,
            "itemtype": "method",
            "name": "abstract",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "use anAbstract",
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 141,
            "description": "Tests if `member` is an abstract method (declared with `Mxr.anAbstract()`).\n\n    if (Mxr.isAbstract(M.prototype.doStuff) {\n        //...\n    }",
            "itemtype": "method",
            "name": "isAbstract",
            "static": 1,
            "params": [
                {
                    "name": "member",
                    "description": "the member to test",
                    "type": "Function"
                }
            ],
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 209,
            "description": "Mixes class `clazz` with mixin `mixin`.\n\nThis is a form of static inheritance in the sense that modification performed to the prototype of `mixin` after calling `mixWith()` aren't reflected on the mixed classes.\n\nThis is different from prototypal inheritance where modifications are propagated to subclasses and therefore is a sort of dynamic inheritance.\n\nWhat makes mixins interesting is that they support multliple inheritance.\n\n    function M() {}\n    M.prototype.X = 0;\n    function A() {}\n    A.prototype.Y = 0;\n    Mxr.mixWith(A,M);\n    var a = new A();\n    a.X == 0;                 //true\n    a.Y == 0;                 //true\n    M.prototype.X = 1;\n    A.prototype.X = 1;\n    a.X == 1;                 //false, static inheritance\n    a.Y == 1;                 //true, dynamic inheritance",
            "itemtype": "method",
            "name": "mixWith",
            "static": 1,
            "params": [
                {
                    "name": "clazz",
                    "description": "the destination class",
                    "type": "Class"
                },
                {
                    "name": "mixin",
                    "description": "the mix-in",
                    "type": "Class"
                }
            ],
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 242,
            "itemtype": "method",
            "name": "mix",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "use mixWith",
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 290,
            "description": "Tests if `object` is an instance of a class mixed with `mixin`.\n\nIt tests for static inheritance.\n\n    function A() {}\n    function B() {}\n    Mxr.mixWith(A,B);\n    var a = new A();\n    a instanceof A;           //true\n    a instanceof B;           //false\n    Mxr.isMixedWith(a,A);    //false\n    Mxr.isMixedWith(a,B);    //true",
            "itemtype": "method",
            "name": "isMixedWith",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "the instance under test",
                    "type": "Object"
                },
                {
                    "name": "mixin",
                    "description": "the mix-in to check",
                    "type": "Class"
                }
            ],
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 326,
            "itemtype": "method",
            "name": "isStatically",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "use isMixedWith",
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 333,
            "description": "Tests if `object` is an instance of a `clazz` or an instance of a class mixed with `clazz`.\n\nIn other words it tests for both static and dynamic inheritance.\n\n    function A() {}\n    function B() {}\n    Mxr.mixWith(A,B);\n    var a = new A();\n    a instanceof A; //true\n    a instanceof B; //false\n    Mxr.isA(a,A);    //true\n    Mxr.isA(a,B);    //true",
            "itemtype": "method",
            "name": "isA",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "the instance under test",
                    "type": "Object"
                },
                {
                    "name": "clazz",
                    "description": "the class to check",
                    "type": "Class"
                }
            ],
            "class": "Mxr"
        },
        {
            "file": "js\\src\\Mxr.js",
            "line": 358,
            "itemtype": "method",
            "name": "is",
            "static": 1,
            "deprecated": true,
            "deprecationMessage": "use isA",
            "class": "Mxr"
        }
    ],
    "warnings": []
}